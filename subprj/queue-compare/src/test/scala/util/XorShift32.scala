// See README.md for license details.
package sni.util

import chisel3._
import chisel3.util._

/**
 * XorShift32
 * This module is generated random value using XorShift32 algorithm.
 * The range of random value are (min) to (max - 1).
 * @param min Minimum value which is generated by XorShift32
 * @param max Maximum value which is generated by XorShift32
 */
class XorShift32(min: BigInt, max: BigInt) extends Module {

  require(min < max, f"max must be grater than min (min, max) = (0x$min%x, 0x$max%x).")
  require(min >= 0, f"min must be grater than equal 0 (min = $min%d).")

  val outBits = log2Ceil(max)

  require(outBits <= 32, s"output bit width <= 32")

  val io = IO(new Bundle {
    val seed = Input(UInt(32.W))
    val update = Input(Bool())
    val rand_valid = Output(Bool())
    val rand_out = Output(UInt(outBits.W))
  })

  val r_calc_buf = RegInit(io.seed)

  when(io.update) {
    val y0 = r_calc_buf ^ (r_calc_buf << 13.U).asUInt()(31, 0)
    val y1 = y0 ^ (y0 >> 17.U).asUInt()(31, 0)
    val y2 = y1 ^ (y1 << 5.U).asUInt()(31, 0)
    r_calc_buf := y2
  }

  io.rand_valid := true.B
  io.rand_out := r_calc_buf(outBits - 1, 0)
}
